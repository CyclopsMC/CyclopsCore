plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.97'
    id 'net.darkhax.curseforgegradle' version '1.0.8'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'com.diffplug.spotless' version '5.14.3'
	id 'com.modrinth.minotaur' version '2.+'
}

apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'maven-publish'

// All jar files from this folder will be added automatically as runtime mod dependencies (inspired by AE2's build.gradle)
def extraModsDir = "extra-mods"

import net.neoforged.gradle.common.tasks.PotentiallySignJar

// Determine build number
String build_number = "DEV" // this will be referenced as simply build_number from now on.
if (System.getenv().BUILD_NUMBER)
    build_number = System.getenv().BUILD_NUMBER
if (System.getenv().TRAVIS_BUILD_NUMBER)
    build_number = System.getenv().TRAVIS_BUILD_NUMBER
if (System.getenv().GITHUB_RUN_ID)
    build_number = System.getenv().GITHUB_RUN_NUMBER
if (System.getenv().RELEASE || System.getenv().TRAVIS_TAG)
    build_number = "RELEASE"
logger.lifecycle "BUILDING VERSION: " + build_number

// Set mod details
version = project.mod_version
group = "org.cyclops.cyclopscore"
archivesBaseName = "CyclopsCore-${project.minecraft_version}-neoforge"
base {
    archivesName = archivesBaseName
}

// Set Java details
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.compilerArgs << "-Xmaxerrs" << "9999"
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Load secrets
def getSecrets() {
    Properties props = new Properties()
    if (file('./secrets.properties').exists()) {
        props.load(new FileInputStream(file('./secrets.properties')))
    }
    return props
}
Properties secrets = getSecrets();

sourceSets {
    api {
        resources.srcDirs = []
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
    javadoc.classpath += sourceSets.api.output
}

repositories {
    mavenCentral()
    maven {
        name "Baubles maven repo"
        url "https://jitpack.io"
    }
    maven {
        name "Curios"
        url "https://maven.theillusivec4.top/"
    }
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"

    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-neoforge:${project.curios_version}") // https://maven.theillusivec4.top/top/theillusivec4/curios/curios-neoforge/
    compileOnly "top.theillusivec4.curios:curios-neoforge:${project.curios_version}:api"

    // Project lombok
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.+"

    // Locally sourced extra mods for runtime (i.e. testing)
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly "extra-mods:$artifactId:$version"
    }
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
	}
}

runs {
    configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
		modSource project.sourceSets.api
    }
	
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

if (build_number.equals("RELEASE"))
    version = "${project.mod_version}"
else
    version = "${project.mod_version}-${build_number}"

jar {
    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${project.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    exclude 'org/cyclops/cyclopscore/modcompat/curios/*'
    source = [sourceSets.main.allJava, sourceSets.api.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:accessibility,html,reference,syntax', '-quiet')
}

task signJar(type: PotentiallySignJar, dependsOn: jar) {
    dependsOn(tasks.jar)

    onlyIf {
        System.getenv().SIGN_KEYSTORE
    }

    keyStore = System.getenv().SIGN_KEYSTORE
    alias = System.getenv().SIGN_ALIAS
    storePass = System.getenv().SIGN_STOREPASS
    keyPass = System.getenv().SIGN_KEYPASS
    input = jar.archivePath
    output = jar.archivePath
}

task deobfJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('deobf')
    from sourceSets.main.output

    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${project.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.jar)

    if(secrets.hasProperty("curseforge_key") && secrets.hasProperty("changelog")) {
        apiToken = secrets.curseforge_key
    } else if(System.getenv().GITHUB_ACTIONS && System.getenv().CURSEFORGE_KEY_SECRET) {
        apiToken = System.getenv().CURSEFORGE_KEY_SECRET
    } else {
        apiToken = "DUMMY"
    }

    def projectId = "232758" // my project url is http://minecraft.curseforge.com/mc-mods/232758/

    def mainFile = upload(projectId, jar)
	mainFile.changelogType = "text"
    if (new File("resources/changelog/${project.version}.txt").exists()) {
        mainFile.changelog = file("resources/changelog/${project.version}.txt")
    }
	mainFile.addGameVersion(project.minecraft_version)
	mainFile.addModLoader("NeoForge")
}

modrinth {
    if(secrets.modrinth_key) {
        token = secrets.modrinth_key
    } else if(System.getenv().GITHUB_ACTIONS && System.getenv().MODRINTH_KEY_SECRET) {
        token = System.getenv().MODRINTH_KEY_SECRET
    } else {
        token = "DUMMY"
    }
    projectId = "Z9DM0LJ4"
    versionNumber = project.minecraft_version + '-' + project.mod_version
    versionType = project.release_type
    uploadFile = jar
    gameVersions = [ project.minecraft_version ]
    changelog = ""
    if (new File("resources/changelog/${project.version}.txt").exists()) {
        changelog = new File("resources/changelog/${project.version}.txt").text
    }
}

configurations {
    deployerJars
}

publishing {
    repositories {
        if (project.hasProperty("filesmaven_url")) {
            logger.info('Publishing to files server')
            maven {
                url project.filesmaven_url
                credentials {
                    username = project.filesmaven_username
                    password = project.filesmaven_key
                }
            }
        } else if (System.getenv("MAVEN_URL")) {
            logger.info('Publishing to files server')
            maven {
                url System.getenv("MAVEN_URL")
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_KEY")
                }
            }
        } else {
            logger.error('No maven repo was set!')
        }
    }

    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar, javadocJar, deobfJar, sourcesJar]
            publication.artifactId = project.archivesBaseName.toLowerCase() // GH can't handle uppercase...
        }
    }
}

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

spotless {
    java {
        target 'src/*/java/org/cyclops/**/*.java'

        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        indentWithSpaces()
    }
}

tasks.register('updateGitHooks', Copy) {
    from './scripts/pre-commit'
    into './.git/hooks'
}
compileJava.dependsOn updateGitHooks


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
