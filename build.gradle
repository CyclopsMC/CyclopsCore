buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        //classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    // For people who want stable
    //id "net.minecraftforge.gradle.forge" version "2.0.2"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.kt3k.coveralls' version '2.10.2'
}

// For those who want the bleeding edge
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'maven'

import net.minecraftforge.gradle.common.task.SignJar

loadProperties()

version = config.mod_version
group = "org.cyclops.cyclopscore"
archivesBaseName = "CyclopsCore"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def loadProperties() {
    // Config file with custom properties
    ext.configFile = file "build.properties"
    configFile.withReader {
        def prop = new Properties()
        prop.load(it)
        ext.config = new ConfigSlurper().parse prop
    }
    
    // grab buildNumber
    ext.buildnumber = "DEV" // this will be referenced as simply project.buildnumber from now on.
    if (System.getenv().BUILD_NUMBER)
        project.buildnumber = System.getenv().BUILD_NUMBER
    if (System.getenv().TRAVIS_BUILD_NUMBER)
        project.buildnumber = System.getenv().TRAVIS_BUILD_NUMBER
    if (System.getenv().GITHUB_RUN_ID)
        project.buildnumber = System.getenv().GITHUB_RUN_NUMBER
    if (System.getenv().RELEASE || System.getenv().TRAVIS_TAG)
        project.buildnumber = "RELEASE"
    logger.lifecycle "BUILDING VERSION: " + project.buildnumber
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        java {
            // TODO: temporarily disable some mod compats
            exclude '**/modcompat/crafttweaker/**'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    javadoc.classpath += sourceSets.api.output
}

repositories {
    mavenCentral()
    maven {
        name "Blamejared Maven Repo"
        url "http://blamejared.com/maven"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name "Baubles maven repo"
        url "https://jitpack.io"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"

    //deobf("CraftTweaker2:CraftTweaker2-API:${config.crafttweakerapi_version}") { // http://blamejared.com/maven/CraftTweaker2/CraftTweaker2-API/maven-metadata.xml
    //    exclude group: 'org.ow2.asm', module: 'asm-debug-all'
    //}
    compileOnly fg.deobf("mezz.jei:jei-${config.jei_version}:api") // https://dvs1.progwml6.com/jenkins/
    compileOnly fg.deobf("com.github.lazyMods:Baubles:${config.baubles_version}:api") // https://github.com/lazyMods/Baubles/releases

    // Project lombok
    compileOnly "org.projectlombok:lombok:1.16.4"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.+"
}

minecraft {
    mappings channel: "${config.mcp_mappings_channel}", version: "${config.mcp_mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cyclopscore {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                cyclopscore {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'cyclopscore', '--all', '--output', file('src/generated/resources/')
            mods {
                cyclopscore {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

if (project.buildnumber.equals("RELEASE"))
    version = "${config.minecraft_version}-${config.mod_version}"
else
    version = "${config.minecraft_version}-${config.mod_version}-${buildnumber}"

jar {
    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${config.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.getenv().SIGN_KEYSTORE
    }

    keyStore = System.getenv().SIGN_KEYSTORE
    alias = System.getenv().SIGN_ALIAS
    storePass = System.getenv().SIGN_STOREPASS
    keyPass = System.getenv().SIGN_KEYPASS
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
build.dependsOn signJar

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${config.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

curseforge {
    if(project.hasProperty("curseforge_key") && project.hasProperty("changelog")) {
        apiKey = project.curseforge_key
    } else if((System.getenv().TRAVIS || System.getenv().GITHUB_ACTIONS) && System.getenv().CURSEFORGE_KEY_SECRET) {
        apiKey = System.getenv().CURSEFORGE_KEY_SECRET
    } else {
        apiKey = "DUMMY"
    }

    project {
        id = "232758" // my project url is http://minecraft.curseforge.com/mc-mods/232758/
        releaseType = project.config.release_type
        mainArtifact(jar) {

        }

        changelog = ""
        if (new File("resources/changelog/${project.version}.txt").exists()) {
            changelog = new File("resources/changelog/${project.version}.txt").text
        }

        addArtifact deobfJar
        addArtifact sourceJar
        addArtifact javadocJar
    }
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
}

uploadArchives {
    repositories {
        add getProject().repositories.mavenLocal()
    }
    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        if (project.hasProperty("filesmaven_url")) {
            logger.info('Publishing to files server')
            repository(url: project.filesmaven_url) {
                authentication(userName: project.filesmaven_username, password: project.filesmaven_key)
            }
        } else if (System.getenv().MAVEN_URL) {
            logger.info('Publishing to files server')
            repository(url: System.getenv().MAVEN_URL) {
                authentication(userName: System.getenv().MAVEN_USERNAME, password: System.getenv().MAVEN_KEY)
            }
        } else {
            logger.info('Publishing to repo folder')
            repository(url: 'file://localhost/' + project.file('~/.m2/repository').getAbsolutePath())
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName.toLowerCase()
        }
        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'Minecraft coremod for EvilCraft, Integrated Dynamics and others.'
            url 'https://github.com/CyclopsMC/CyclopsCore'

            scm {
                url 'https://github.com/CyclopsMC/CyclopsCore'
                connection 'scm:git:git://github.com/CyclopsMC/CyclopsCore.git'
                developerConnection 'scm:git:git@github.com:CyclopsMC/CyclopsCore.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/CyclopsMC/CyclopsCore/issues'
            }

            developers {
                developer {
                    id 'rubensworks'
                    name 'rubensworks'
                    roles { role 'developer' }
                }
            }
        }
    }
}
uploadArchives.dependsOn build

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
